Description: >
    Deploy a high-availability web app using CloudFormation
    Austin Meyer
Parameters:

    ProjectName:
        Description: This is the name of the project I am working on
        Type: String

    NetworkName:
        Description: An environment name that will be prefixed to resource names
        Type: String

Resources:

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH locally
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      # Enable this if you are going to build a test instance of the stack
      # - IpProtocol: tcp
      #   FromPort: 22
      #   ToPort: 22
      #   CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Sub! NetworkName Security Group
      - Key: ProjectName
        Value: Ref! ProjectName

#This is for a test enviroment only
  # BastionHostServerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: Allow http to our hosts and SSH locally
  #     VpcId:
  #       Fn::ImportValue:
  #         !Sub "${NetworkName}-VPC"
  #     SecurityGroupIngress:
  #     - IpProtocol: tcp
  #       FromPort: 22
  #       ToPort: 22
  #       CidrIp: 192.168.86.255/32
  #     Tags:
  #     - Key: Name
  #       Value: Sub! NetworkName Security Group
  #     - Key: ProjectName
  #       Value: Ref! ProjectName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to the load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkName}-VPC"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Ref! NetworkName
      - Key: ProjectName
        Value: Ref! ProjectName

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument: 
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      Path: /
      RoleName: UdacityS3ReadOnlyEC2

  ProfileWithRolesForOurApp: 
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: "/"
      Roles: 
        - !Ref UdacityS3ReadOnlyEC2      

  WebAppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-06e54d05255faf8f6
      SecurityGroups:
      - Ref: WebServerSecurityGroup
      IamInstanceProfile:
        Ref: ProfileWithRolesForOurApp
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'

  WebAppAutoScallingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${NetworkName}-PVT-Subnets"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfiguration
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${NetworkName}-PUB1-Subnet"
      - Fn::ImportValue: !Sub "${NetworkName}-PUB2-Subnet"
      SecurityGroups:
      - Ref: LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${NetworkName} Web Balancer
        - Key: ProjectName
          Value: !Ref ProjectName

  ElasticLoadBalancingListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLoadBalancer
      Port: '80'
      Protocol: HTTP

  ElasticLoadBalancingListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'ElasticLoadBalancingListener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 4
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${NetworkName}-VPC"
          
# Use this if you are making a Test instance and you would like to remote into the machine
  # BastionHostLaunchConfiguration:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: ami-06e54d05255faf8f6
  #     SecurityGroups:
  #     - Ref: BastionHostServerSecurityGroup
  #     InstanceType: t3.small
  #     BlockDeviceMappings:
  #     - DeviceName: "/dev/sdk"
  #       Ebs:
  #         VolumeSize: '10'

  # BastionHostAutoScallingGroup:
  #   Type: AWS::AutoScaling::AutoScalingGroup
  #   Properties:
  #     VPCZoneIdentifier:
  #     - Fn::ImportValue: 
  #         !Sub "${NetworkName}-PUB-Subnets"
  #     LaunchConfigurationName:
  #       Ref: BastionHostLaunchConfiguration
  #     MinSize: '2'
  #     MaxSize: '2'
  #     TargetGroupARNs:
  #     - Ref: WebAppTargetGroup

Outputs:
  WebAppLoadBalancerDNSName:
    Description: This is the URL for the Load Balancer
    Value: !Join ["", ["HTTP://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${NetworkName}-LoadBalancerDNSName